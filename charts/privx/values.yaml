# Default values for privx.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
fullnameOverride: ""
nameOverride: ""
ingress:
  common:
    className: "nginx"
    hosts:
      - host: localhost
    annotations:
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      nginx.ingress.kubernetes.io/proxy-ssl-secret: "privx/proxy-ca-secret"
      nginx.ingress.kubernetes.io/proxy-ssl-verify: "on"
      nginx.ingress.kubernetes.io/proxy-ssl-server-name: "on"
      nginx.ingress.kubernetes.io/ssl-ciphers: "AESGCM+EECDH:AESGCM+EDH:AES+EECDH:AES+EDH:AES128-GCM-SHA256:AES128-SHA256:AES128-SHA:-DSS:-EDH"
      nginx.ingress.kubernetes.io/ssl-prefer-server-ciphers: "true"
      nginx.ingress.kubernetes.io/proxy-ssl-protocols: "TLSv1.2"
      nginx.ingress.kubernetes.io/proxy-body-size: 1m
      nginx.ingress.kubernetes.io/affinity: "cookie"
      nginx.ingress.kubernetes.io/affinity-mode: "persistent"
      nginx.ingress.kubernetes.io/session-cookie-change-on-failure: "true"

db:
  # database address (required)
  address:
  # database port (required)
  port:
  # database admin user name and password (required)
  admin:
    createDB: true
    createDBUser: true
    name:
    password:
  # database user name and password (required)
  user:
    name:
    password:
  # database name (required)
  name:
  # PrivX will not work if PostgreSQL version < 11.X. By setting skipVersionCheck
  # to true, user confirms that the PostgreSQL server version >= 11.X.
  # Acceptable values are true or false (case sensitive).
  skipVersionCheck: false
  # database ssl mode (verify-full by default. Complete list of options can be checked from the postgresql version used)
  sslmode: verify-full
  sslDBcertificate:

privx:
  admin:
    #admin username for PrivX UI login (required)
    username:
    #admin password for PrivX UI login (required)
    password:
    #admin email for PrivX UI login (required)
    email:
  # audit.priority is used to set the priority level for audit events in PrivX
  # Here are the priority levels used in PrivX and their corresponding numeric
  # values:
  # - EMERGENCY = 0
  # - ALERT = 1
  # - CRITICAL = 2
  # - ERROR = 3
  # - WARNING = 4
  # - NOTICE = 5
  # - INFO = 6
  # - DEBUG = 7
  #
  # NOTE: The audit feature is enabled separately in the PrivX settings
  audit:
    priority: "6"

  # If enabled, syslog-service will be deployed as a deployment and PrivX audit
  # events will be sent to the syslog-service. When disabled, the audit events
  # are sent to stdout. NOTE: Sensitive audit events are not logged to stdout.
  syslog:
    # value can be either true or false (without quotations)
    enabled: false
    audit:
      # format can either be cef or syslog (default syslog)
      format: syslog
      # Audit events are logged to /var/log/audit.log that is mounted to the syslog
      # pod. If this value is changed, make sure that the syslog has enough
      # permissions to write to the file or send to a remote server.
      to: "/var/log/audit.log"
      # Pick where senstive audit events should be sent. By default those are
      # not logged and sent to /dev/null. Please pick a secure SIEM system to
      # forward those logs to. For security reasons, it is recommended that the
      # logs not be stored on disk.
      # example values:
      # @10.10.10.10:8888 (for sending on UDP port)
      # @@10.10.10.10:8888 (for sending TCP port)
      # for more values, please check the rsyslog configuration rules
      sensitive:
        to:

# global value to define the PrivX images' repository
privxRepository: &privxRepo public.ecr.aws/sshprivx

# global value to define the PrivX images' version tag
privxVersion: &privxTag "36.2"

# When enabled migration will do the backup + upgrade (while using the correct override values)
migration:
  enabled: false

# Enabling shutdown will bring all the deployment replicas to zero
shutdown: false

# This pod security context is used by pods that have useGlobalPodSecurityContext set to true
podSecurityContext:
  fsGroup: 5111
  runAsUser: 5111
  runAsNonRoot: true

securityContext:
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 5111
  allowPrivilegeEscalation: false
#==============Config values (TOMLS, RDPMITM and NGINX configs)
configs:
  nginx:
    name: nginx
    hook: pre-install
    weight: "-2"
    files: "configs/nginx/*"
  rdpmitm:
    name: rdpmitm
    hook: pre-install
    weight: "-2"
    files: "configs/rdpmitm/*"
  settings:
    name: settings
    hook: pre-install
    weight: "-2"
    files: "configs/privx/settings/*"
  templates:
    name: templates
    hook: pre-install
    weight: "-2"
    files: "configs/privx/templates/*"
  syslog:
    name: syslog
    hook: pre-install
    weight: "-2"
    files: "configs/privx/syslog/*"
  db-cert:
    name: db-cert
    hook: pre-install
    weight: "-2"
    files: "configs/database/certificate/*"
  install-scripts:
    name: install-scripts
    hook: pre-install
    weight: "-5"
    files: "configs/scripts/*"
jobs:
# ==========Full Installer Job===============
  installer:
    name: installer
    hook: pre-install
    weight: "-1"
    hookDeletePolicy: before-hook-creation
    image:
      repository: *privxRepo
      name: installer
      pullPolicy: IfNotPresent
      tag: *privxTag
    imagePullSecrets:
      - name: docker-pull-secret
    useGlobalPodSecurityContext: true
    securityContext: {}
    resources: {}
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi
    environment:
      - name: INSTALLER_CMD
        value: full-install
      - name: PRIVX_USER
        value: "5111"
      - name: PRIVX_GROUP
        value: "5111"
    volumes:
      enabled: true
      volumeMounts:
        - mountPath: /opt/privx/temp
          name: privx-config
          subPath: privxtmp
        - mountPath: /opt/privx/keyvault
          name: privx-config
          subPath: keyvault
        - mountPath: /opt/privx/etc
          name: privx-config
          subPath: privxetc
        - mountPath: /var/privx/audit
          name: privx-config
          subPath: privxaudit
        - mountPath: /etc/nginx/privx
          name: privx-config
          subPath: nginxprivx
        - mountPath: /etc/nginx/ssl
          name: privx-config
          subPath: nginxssl
      claims:
        - name: privx-config
          claimName: privx-claim
      configMaps:
        - name: privx-settings-config
          configMap:
            name: settings-config
        - name: privx-templates-config
          configMap:
            name: templates-config
        - name: privx-nginx-config
          configMap:
            name: nginx-config
        - name: privx-rdpmitm-config
          configMap:
            name: rdpmitm-config
        - name: privx-database-certificate
          configMap:
            name: db-cert-config
        - name: privx-install-scripts
          configMap:
            name: install-scripts-config
    initContainersEnvironment:
      - name: config-copier
        env:
          - name: "SSLMODE"
            valueFromTemplate: "{{ .Values.db.sslmode }}"
    initContainers:
      - name: config-copier
        image: "bash:5.2"
        command: [ "bash", "-c" ]
        args:
          - mkdir -p /opt/privx/etc/new;
            mkdir -p /opt/privx/etc/rdpmitm;
            mkdir -p /opt/privx/etc/templates;
            mkdir -p /opt/privx/etc/locales/workflowengine;
            echo copying the database certificate;
            cp /certificate-mount/server.crt /opt/privx/etc/privx-db-trust-anchor.pem;
            echo copying template tomls;
            cp -f /templates-mount/* /opt/privx/etc/new/;
            echo copying existing tomls and settings;
            cp -f /settings-mount/* /opt/privx/etc/;
            echo copying nginx config;
            cp -f /nginx-mount/* /etc/nginx/privx/;
            echo copying rdpmitm config;
            cp -f /rdpmitm-mount/* /opt/privx/etc/rdpmitm/;
            rm -rf /opt/privx/keyvault/*;
            rm -rf /opt/privx/temp/*;
            echo setting sslrootcert if needed;
            cp /installscripts/check-db-cert.sh /opt/privx/etc/check-db-cert.sh;
            chmod +x /opt/privx/etc/check-db-cert.sh;
            /opt/privx/etc/check-db-cert.sh /opt/privx/etc/privx-db-trust-anchor.pem;
            echo done with sslrootcert changes
        volumeMounts:
          - name: privx-templates-config
            mountPath: /templates-mount
          - name: privx-settings-config
            mountPath: /settings-mount
          - name: privx-nginx-config
            mountPath: /nginx-mount
          - name: privx-rdpmitm-config
            mountPath: /rdpmitm-mount
          - name: privx-database-certificate
            mountPath: /certificate-mount
            readOnly: true
          - name: privx-config
            mountPath: /opt/privx/etc
            subPath: privxetc
          - name: privx-config
            mountPath: /etc/nginx/privx
            subPath: nginxprivx
          - mountPath: /opt/privx/keyvault
            name: privx-config
            subPath: keyvault
          - mountPath: /opt/privx/temp
            name: privx-config
            subPath: privxtmp
          - name: privx-install-scripts
            mountPath: /installscripts
        resources: {}
          # limits:
          #   cpu: 100m
          #   memory: 128Mi
          # requests:
          #   cpu: 100m
          #   memory: 128Mi
    serviceAccount:
      create: false
      annotations: {}
      name: installer
    rbac:
      create: false

# ==========Internal Cert Updater Job===============
  internal-cert-updater:
    name: internal-cert-updater
    hook: pre-install
    weight: "-1"
    hookDeletePolicy: before-hook-creation
    image:
      repository: *privxRepo
      name: installer
      pullPolicy: IfNotPresent
      tag: *privxTag
    imagePullSecrets:
      - name: docker-pull-secret
    useGlobalPodSecurityContext: true
    securityContext: {}
    resources: {}
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi
    environment:
      - name: INSTALLER_CMD
        value: update-internal-cert
      - name: CNAME
        value: nginx
    volumes:
      enabled: true
      volumeMounts:
        - mountPath: /etc/nginx/ssl
          name: privx-config
          subPath: nginxssl
        - mountPath: /opt/privx/keyvault
          name: privx-config
          subPath: keyvault
        - name: privx-config
          mountPath: /opt/privx/etc
          subPath: privxetc
      claims:
        - name: privx-config
          claimName: privx-claim
    serviceAccount:
      create: false
      annotations: {}
      name: internal-cert-updater
    rbac:
      create: false

# ==========Job for creating TLS secret between ingress and pod===============
  proxy-ca-secret-generator:
    name: proxy-ca-secret-generator
    hook: post-install
    weight: "-1"
    hookDeletePolicy: before-hook-creation,hook-succeeded
    image:
      repository: *privxRepo
      name: secrets-generator
      pullPolicy: IfNotPresent
      tag: *privxTag
    imagePullSecrets:
      - name: docker-pull-secret
    useGlobalPodSecurityContext: true
    securityContext: {}
    resources: {}
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi
    args:
      - --keys=ca.crt
      - --files=/etc/nginx/ssl/privx-ca.crt
      - --secret_name=proxy-ca-secret
      - --namespace=privx
      - --secret_type=Opaque
      - --replace=true
    volumes:
      enabled: true
      volumeMounts:
        - mountPath: /etc/nginx/ssl
          name: privx-config
          subPath: nginxssl
      claims:
        - name: privx-config
          claimName: privx-claim
    serviceAccount:
      create: true
      annotations: {}
      name: proxy-ca-secret-generator
    rbac:
      create: true
      name: create-secrets
      namespace: privx
      role:
        name: secrets-creator
      subjects:
        - kind: ServiceAccount
          name: proxy-ca-secret-generator

# ==========Ingress CA cert values===============
cert:
  name: ca-cert
  secretName: privx-ca-secret
  duration: 24h
  renewBefore: 1h
  organizations:
    - <PlacholderORG>
  isAuthority: true
  usages:
    - cert sign
    - crl sign
  selfsigned: false

# ===================RBAC roles===================
roles:
  secrets-creator:
    name: secrets-creator
    rules:
      - apiGroups:
          - ""
        resources:
          - secrets
        verbs:
          - create
          - delete

# ============= PrivX microservices ===============
ms:
  # ==========rdp-proxy values===============
  rdpproxy:
    name: rdp-proxy
    replicaCount: 1

    image:
      repository: *privxRepo
      name: rdp-proxy
      pullPolicy: IfNotPresent
      tag: *privxTag

    imagePullSecrets:
      - name: docker-pull-secret
    nameOverride: ""
    fullnameOverride: ""

    initContainers: []
    serviceAccount:
      # Specifies whether a service account should be created
      create: true
      # Annotations to add to the service account
      annotations: {}
      # The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template
      name: rdp-proxy

    environment:
      - name: HOME
        value: /home/privx

    podAnnotations: {}
    useGlobalPodSecurityContext: true
    securityContext: {}

    service:
      enabled: true
      type: ClusterIP
      port: 8087

    ingress:
      https:
        name: https
        useCommonHost: true
        useCommonAnnotations: false
        className: ""
        annotations:
          nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
          nginx.ingress.kubernetes.io/proxy-ssl-secret: "privx/proxy-ca-secret"
          nginx.ingress.kubernetes.io/proxy-ssl-verify: "on"
          nginx.ingress.kubernetes.io/proxy-ssl-name: "rdp-proxy"
          nginx.ingress.kubernetes.io/proxy-ssl-server-name: "on"
          nginx.ingress.kubernetes.io/ssl-ciphers: "AESGCM+EECDH:AESGCM+EDH:AES+EECDH:AES+EDH:AES128-GCM-SHA256:AES128-SHA256:AES128-SHA:-DSS:-EDH"
          nginx.ingress.kubernetes.io/ssl-prefer-server-ciphers: "true"
          nginx.ingress.kubernetes.io/proxy-ssl-protocols: "TLSv1.2"
          nginx.ingress.kubernetes.io/proxy-body-size: 0m
          nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
          nginx.ingress.kubernetes.io/affinity: "cookie"
          nginx.ingress.kubernetes.io/affinity-mode: "persistent"
          nginx.ingress.kubernetes.io/session-cookie-change-on-failure: "true"
        hosts:
          - host: localhost
            paths:
              - path: /rdp-proxy
                pathType: Prefix
        tls:
          - secretName: privx-tls
            hosts:
              - localhost

    resources: {}
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi
    rbac:
      create: false

    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 100
      targetCPUUtilizationPercentage: 80
      # targetMemoryUtilizationPercentage: 80

    nodeSelector: {}

    tolerations: []

    affinity: {}
    level:
      log: DEBUG
      trace: 3

    volumes:
      enabled: true
      volumeMounts:
        - mountPath: /tmp
          name: privx-config
          subPath: rdpproxytmp
        - mountPath: /home/privx
          name: privx-config
          subPath: rdpproxyhome
        - mountPath: /opt/privx/cert
          name: privx-config
          subPath: privxcert
        - mountPath: /opt/privx/keyvault
          name: privx-config
          subPath: keyvault
        - mountPath: /opt/privx/etc
          name: privx-config
          subPath: privxetc
        - mountPath: /etc/nginx/ssl
          name: privx-config
          subPath: nginxssl
        - mountPath: /var/privx/audit
          name: privx-config
          subPath: privxaudit
        - mountPath: /guacamole-server
          name: privx-config
          subPath: guacamole
      claims:
        - name: privx-config
          claimName: privx-claim

  # ==========ssh-proxy values===============
  sshproxy:
    name: ssh-proxy
    replicaCount: 1

    image:
      repository: *privxRepo
      name: ssh-proxy
      pullPolicy: IfNotPresent
      tag: *privxTag

    imagePullSecrets:
      - name: docker-pull-secret
    nameOverride: ""
    fullnameOverride: ""

    initContainers: []
    serviceAccount:
      # Specifies whether a service account should be created
      create: true
      # Annotations to add to the service account
      annotations: {}
      # The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template
      name: ssh-proxy

    podAnnotations: {}
    useGlobalPodSecurityContext: true
    securityContext: {}

    service:
      enabled: true
      type: ClusterIP
      port: 8880

    ingress:
      https:
        name: https
        useCommonHost: true
        useCommonAnnotations: false
        className: ""
        annotations:
          nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
          nginx.ingress.kubernetes.io/proxy-ssl-secret: "privx/proxy-ca-secret"
          nginx.ingress.kubernetes.io/proxy-ssl-verify: "on"
          nginx.ingress.kubernetes.io/proxy-ssl-name: "ssh-proxy"
          nginx.ingress.kubernetes.io/proxy-ssl-server-name: "on"
          nginx.ingress.kubernetes.io/ssl-ciphers: "AESGCM+EECDH:AESGCM+EDH:AES+EECDH:AES+EDH:AES128-GCM-SHA256:AES128-SHA256:AES128-SHA:-DSS:-EDH"
          nginx.ingress.kubernetes.io/ssl-prefer-server-ciphers: "true"
          nginx.ingress.kubernetes.io/proxy-ssl-protocols: "TLSv1.2"
          nginx.ingress.kubernetes.io/proxy-body-size: 0m
          nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
          nginx.ingress.kubernetes.io/affinity: "cookie"
          nginx.ingress.kubernetes.io/affinity-mode: "persistent"
          nginx.ingress.kubernetes.io/session-cookie-change-on-failure: "true"
        hosts:
          - host: localhost
            paths:
              - path: /ssh-proxy
                pathType: Prefix
        tls:
          - secretName: privx-tls
            hosts:
              - localhost

    resources: {}
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi

    rbac:
      create: false

    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 100
      targetCPUUtilizationPercentage: 80
      # targetMemoryUtilizationPercentage: 80

    nodeSelector: {}

    tolerations: []

    affinity: {}
    level:
      log: DEBUG
      trace: 3

    volumes:
      enabled: true
      volumeMounts:
        - mountPath: /tmp
          name: privx-config
          subPath: privxsshproxyshareddrive
        - mountPath: /opt/privx/cert
          name: privx-config
          subPath: privxcert
        - mountPath: /opt/privx/keyvault
          name: privx-config
          subPath: keyvault
        - mountPath: /opt/privx/etc
          name: privx-config
          subPath: privxetc
        - mountPath: /etc/nginx/ssl
          name: privx-config
          subPath: nginxssl
        - mountPath: /var/privx/audit
          name: privx-config
          subPath: privxaudit
      claims:
        - name: privx-config
          claimName: privx-claim

  #==========auth values===============
  auth:
    name: auth
    replicaCount: 1

    image:
      repository: *privxRepo
      name: auth
      pullPolicy: IfNotPresent
      # Overrides the image tag whose default is the chart appVersion.
      tag: *privxTag

    imagePullSecrets:
      - name: docker-pull-secret
    nameOverride: ""
    fullnameOverride: ""

    initContainers: []
    serviceAccount:
      # Specifies whether a service account should be created
      create: true
      # Annotations to add to the service account
      annotations: {}
      # The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template
      name: auth

    podAnnotations: {}
    useGlobalPodSecurityContext: true
    securityContext: {}

    service:
      enabled: true
      type: ClusterIP
      port: 8083
      internal:
        oidc:
          name: oidc
          port: 8183
          protocol: TCP

    ingress:
      https:
        name: https
        useCommonHost: true
        useCommonAnnotations: true
        className: ""
        annotations:
          nginx.ingress.kubernetes.io/proxy-ssl-name: "auth"
          nginx.ingress.kubernetes.io/proxy-buffering: "on"
          nginx.ingress.kubernetes.io/proxy-buffer-size: "16k"
          nginx.ingress.kubernetes.io/proxy-busy-buffer-size: "16k"
        hosts:
          - host: localhost
            paths:
              - path: /auth
                pathType: Prefix
        tls:
          - secretName: privx-tls
            hosts:
              - localhost

    resources: {}
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi

    rbac:
      create: false

    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 100
      targetCPUUtilizationPercentage: 80
      # targetMemoryUtilizationPercentage: 80

    nodeSelector: {}

    tolerations: []

    affinity: {}
    level:
      log: DEBUG
      trace: 3

    volumes:
      enabled: true
      volumeMounts:
        - mountPath: /opt/privx/cert
          name: privx-config
          subPath: privxcert
        - mountPath: /opt/privx/keyvault
          name: privx-config
          subPath: keyvault
        - mountPath: /opt/privx/etc
          name: privx-config
          subPath: privxetc
        - mountPath: /etc/nginx/ssl
          name: privx-config
          subPath: nginxssl
      claims:
        - name: privx-config
          claimName: privx-claim


  #==========keyvault values===============
  keyvault:
    name: keyvault
    replicaCount: 1

    image:
      repository: *privxRepo
      name: keyvault
      pullPolicy: IfNotPresent
      tag: *privxTag

    imagePullSecrets:
      - name: docker-pull-secret
    nameOverride: ""
    fullnameOverride: ""

    initContainers: []
    serviceAccount:
      # Specifies whether a service account should be created
      create: true
      # Annotations to add to the service account
      annotations: {}
      # The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template
      name: keyvault

    podAnnotations: {}
    useGlobalPodSecurityContext: true
    securityContext: {}

    service:
      enabled: true
      type: ClusterIP
      port: 8090

    ingress:
      https:
        name: https
        useCommonHost: true
        useCommonAnnotations: true
        className: ""
        annotations:
          nginx.ingress.kubernetes.io/proxy-ssl-name: "keyvault"
        hosts:
          - host: localhost
            paths:
              - path: /keyvault
                pathType: Prefix
        tls:
          - secretName: privx-tls
            hosts:
              - localhost

    resources: {}
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi

    rbac:
      create: false

    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 100
      targetCPUUtilizationPercentage: 80
      # targetMemoryUtilizationPercentage: 80

    nodeSelector: {}

    tolerations: []

    affinity: {}
    level:
      log: DEBUG
      trace: 3

    volumes:
      enabled: true
      volumeMounts:
        - mountPath: /opt/privx/cert
          name: privx-config
          subPath: privxcert
        - mountPath: /opt/privx/keyvault
          name: privx-config
          subPath: keyvault
        - mountPath: /opt/privx/etc
          name: privx-config
          subPath: privxetc
        - mountPath: /etc/nginx/ssl
          name: privx-config
          subPath: nginxssl
      claims:
        - name: privx-config
          claimName: privx-claim

  #==========authorizer values===============
  authorizer:
    name: authorizer
    replicaCount: 1

    image:
      repository: *privxRepo
      name: authorizer
      pullPolicy: IfNotPresent
      tag: *privxTag

    imagePullSecrets:
      - name: docker-pull-secret
    nameOverride: ""
    fullnameOverride: ""

    initContainers: []
    serviceAccount:
      # Specifies whether a service account should be created
      create: true
      # Annotations to add to the service account
      annotations: {}
      # The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template
      name: authorizer

    podAnnotations: {}
    useGlobalPodSecurityContext: true
    securityContext: {}

    service:
      enabled: true
      type: ClusterIP
      port: 8082

    ingress:
      https:
        name: https
        useCommonHost: true
        useCommonAnnotations: true
        className: ""
        annotations:
          nginx.ingress.kubernetes.io/proxy-ssl-name: "authorizer"
        hosts:
          - host: localhost
            paths:
              - path: /authorizer
                pathType: Prefix
        tls:
          - secretName: privx-tls
            hosts:
              - localhost
      http:
        name: http
        useCommonHost: true
        useCommonAnnotations: false
        className: ""
        annotations:
          nginx.ingress.kubernetes.io/ssl-redirect: "false"
          nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
          nginx.ingress.kubernetes.io/proxy-ssl-secret: "privx/proxy-ca-secret"
          nginx.ingress.kubernetes.io/proxy-ssl-verify: "on"
          nginx.ingress.kubernetes.io/proxy-ssl-server-name: "on"
          nginx.ingress.kubernetes.io/ssl-ciphers: "AESGCM+EECDH:AESGCM+EDH:AES+EECDH:AES+EDH:AES128-GCM-SHA256:AES128-SHA256:AES128-SHA:-DSS:-EDH"
          nginx.ingress.kubernetes.io/ssl-prefer-server-ciphers: "true"
          nginx.ingress.kubernetes.io/proxy-ssl-protocols: "TLSv1.2"
          nginx.ingress.kubernetes.io/proxy-body-size: 1m
          nginx.ingress.kubernetes.io/proxy-ssl-name: "authorizer"
        hosts:
          - host: localhost
            paths:
              - path: /authorizer/api/v1/cas
                pathType: Prefix
              - path: /authorizer/api/v1/extender/cas
                pathType: Prefix
              - path: /authorizer/api/v1/icap/cas
                pathType: Prefix

    resources: {}
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi

    rbac:
      create: false

    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 100
      targetCPUUtilizationPercentage: 80
      # targetMemoryUtilizationPercentage: 80

    nodeSelector: {}

    tolerations: []

    affinity: {}
    level:
      log: DEBUG
      trace: 3

    volumes:
      enabled: true
      volumeMounts:
        - mountPath: /opt/privx/cert
          name: privx-config
          subPath: privxcert
        - mountPath: /opt/privx/keyvault
          name: privx-config
          subPath: keyvault
        - mountPath: /opt/privx/etc
          name: privx-config
          subPath: privxetc
        - mountPath: /etc/nginx/ssl
          name: privx-config
          subPath: nginxssl
      claims:
        - name: privx-config
          claimName: privx-claim

  #==========connection-manager values===============
  connectionmanager:
    name: connection-manager
    replicaCount: 1

    image:
      repository: *privxRepo
      name: connection-manager
      pullPolicy: IfNotPresent
      tag: *privxTag

    imagePullSecrets:
      - name: docker-pull-secret
    nameOverride: ""
    fullnameOverride: ""

    initContainers: []
    serviceAccount:
      # Specifies whether a service account should be created
      create: true
      # Annotations to add to the service account
      annotations: {}
      # The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template
      name: connection-manager

    podAnnotations: {}
    useGlobalPodSecurityContext: true
    securityContext: {}

    service:
      enabled: true
      type: ClusterIP
      port: 8091

    ingress:
      https:
        name: https
        useCommonHost: true
        useCommonAnnotations: true
        className: ""
        annotations:
          nginx.ingress.kubernetes.io/proxy-ssl-name: "connection-manager"
        hosts:
          - host: localhost
            paths:
              - path: /connection-manager
                pathType: Prefix
        tls:
          - secretName: privx-tls
            hosts:
              - localhost

      connection-manager-search:
        name: search
        useCommonHost: true
        useCommonAnnotations: true
        className: ""
        annotations:
          nginx.ingress.kubernetes.io/proxy-ssl-name: "connection-manager"
          nginx.ingress.kubernetes.io/proxy-read-timeout: "120"
        hosts:
          - host: localhost
            paths:
              - path: /connection-manager/api/v1/connections/search
                pathType: Prefix
        tls:
          - secretName: privx-tls
            hosts:
              - localhost

    resources: {}
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi

    rbac:
      create: false

    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 100
      targetCPUUtilizationPercentage: 80
      # targetMemoryUtilizationPercentage: 80

    nodeSelector: {}

    tolerations: []

    affinity: {}
    level:
      log: DEBUG
      trace: 3

    volumes:
      enabled: true
      volumeMounts:
        - mountPath: /opt/privx/cert
          name: privx-config
          subPath: privxcert
        - mountPath: /opt/privx/keyvault
          name: privx-config
          subPath: keyvault
        - mountPath: /opt/privx/etc
          name: privx-config
          subPath: privxetc
        - mountPath: /etc/nginx/ssl
          name: privx-config
          subPath: nginxssl
        - mountPath: /var/privx/audit
          name: privx-config
          subPath: privxaudit
      claims:
        - name: privx-config
          claimName: privx-claim

  #==========host-store values===============
  hoststore:
    name: host-store
    replicaCount: 1

    image:
      repository: *privxRepo
      name: host-store
      pullPolicy: IfNotPresent
      tag: *privxTag

    imagePullSecrets:
      - name: docker-pull-secret
    nameOverride: ""
    fullnameOverride: ""

    initContainers: []
    serviceAccount:
      # Specifies whether a service account should be created
      create: true
      # Annotations to add to the service account
      annotations: {}
      # The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template
      name: host-store

    podAnnotations: {}
    useGlobalPodSecurityContext: true
    securityContext: {}

    service:
      enabled: true
      type: ClusterIP
      port: 8882

    ingress:
      https:
        name: https
        useCommonHost: true
        useCommonAnnotations: true
        className: ""
        annotations:
          nginx.ingress.kubernetes.io/proxy-ssl-name: "host-store"
        hosts:
          - host: localhost
            paths:
              - path: /host-store
                pathType: Prefix
        tls:
          - secretName: privx-tls
            hosts:
              - localhost

    resources: {}
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi

    rbac:
      create: false

    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 100
      targetCPUUtilizationPercentage: 80
      # targetMemoryUtilizationPercentage: 80

    nodeSelector: {}

    tolerations: []

    affinity: {}
    level:
      log: DEBUG
      trace: 3

    volumes:
      enabled: true
      volumeMounts:
        - mountPath: /opt/privx/cert
          name: privx-config
          subPath: privxcert
        - mountPath: /opt/privx/keyvault
          name: privx-config
          subPath: keyvault
        - mountPath: /opt/privx/etc
          name: privx-config
          subPath: privxetc
        - mountPath: /etc/nginx/ssl
          name: privx-config
          subPath: nginxssl
      claims:
        - name: privx-config
          claimName: privx-claim

  #==========license-manager values===============
  licensemanager:
    name: license-manager
    replicaCount: 1

    image:
      repository: *privxRepo
      name: license-manager
      pullPolicy: IfNotPresent
      tag: *privxTag

    imagePullSecrets:
      - name: docker-pull-secret
    nameOverride: ""
    fullnameOverride: ""

    initContainers: []
    licenseCode:
      dev:
        enabled: false
        value: <placeholder>
      prod:
        enabled: false
        value: <placeholder>
    serviceAccount:
      # Specifies whether a service account should be created
      create: true
      # Annotations to add to the service account
      annotations: {}
      # The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template
      name: license-manager

    podAnnotations: {}
    useGlobalPodSecurityContext: true
    securityContext: {}

    service:
      enabled: true
      type: ClusterIP
      port: 8101

    ingress:
      https:
        name: https
        useCommonHost: true
        useCommonAnnotations: true
        className: ""
        annotations:
          nginx.ingress.kubernetes.io/proxy-ssl-name: "license-manager"
        hosts:
          - host: localhost
            paths:
              - path: /license-manager
                pathType: Prefix
        tls:
          - secretName: privx-tls
            hosts:
              - localhost

    resources: {}
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi

    rbac:
      create: false

    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 100
      targetCPUUtilizationPercentage: 80
      # targetMemoryUtilizationPercentage: 80

    nodeSelector: {}

    tolerations: []

    affinity: {}
    level:
      log: DEBUG
      trace: 3

    volumes:
      enabled: true
      volumeMounts:
        - mountPath: /opt/privx/cert
          name: privx-config
          subPath: privxcert
        - mountPath: /opt/privx/keyvault
          name: privx-config
          subPath: keyvault
        - mountPath: /opt/privx/etc
          name: privx-config
          subPath: privxetc
        - mountPath: /etc/nginx/ssl
          name: privx-config
          subPath: nginxssl
      claims:
        - name: privx-config
          claimName: privx-claim

  #==========monitor-service values===============
  monitorservice:
    name: monitor-service
    replicaCount: 1

    image:
      repository: *privxRepo
      name: monitor-service
      pullPolicy: IfNotPresent
      tag: *privxTag


    imagePullSecrets:
      - name: docker-pull-secret
    nameOverride: ""
    fullnameOverride: ""

    initContainers: []
    serviceAccount:
      # Specifies whether a service account should be created
      create: true
      # Annotations to add to the service account
      annotations: {}
      # The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template
      name: monitor-service

    environment:
      - name: MONITORSERVICE_AUDIT_HOUSEKEEPING_BATCH_SIZE
        value: "10000"

    podAnnotations: {}
    useGlobalPodSecurityContext: true
    securityContext: {}

    service:
      enabled: true
      type: ClusterIP
      port: 8092

    ingress:
      https:
        name: https
        useCommonHost: true
        useCommonAnnotations: true
        className: ""
        annotations:
          nginx.ingress.kubernetes.io/proxy-ssl-name: "monitor-service"
        hosts:
          - host: localhost
            paths:
              - path: /monitor-service
                pathType: Prefix
        tls:
          - secretName: privx-tls
            hosts:
              - localhost

      monitor-service-search:
        name: search
        useCommonHost: true
        useCommonAnnotations: true
        className: ""
        annotations:
          nginx.ingress.kubernetes.io/proxy-ssl-name: "monitor-service"
          nginx.ingress.kubernetes.io/proxy-read-timeout: "120"
        hosts:
          - host: localhost
            paths:
              - path: /monitor-service/api/v1/auditevents/search
                pathType: Prefix
        tls:
          - secretName: privx-tls
            hosts:
              - localhost

    resources: {}
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi

    rbac:
      create: false

    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 100
      targetCPUUtilizationPercentage: 80
      # targetMemoryUtilizationPercentage: 80

    nodeSelector: {}

    tolerations: []

    affinity: {}
    level:
      log: DEBUG
      trace: 3

    volumes:
      enabled: true
      volumeMounts:
        - mountPath: /opt/privx/cert
          name: privx-config
          subPath: privxcert
        - mountPath: /opt/privx/keyvault
          name: privx-config
          subPath: keyvault
        - mountPath: /opt/privx/etc
          name: privx-config
          subPath: privxetc
        - mountPath: /etc/nginx/ssl
          name: privx-config
          subPath: nginxssl
      claims:
        - name: privx-config
          claimName: privx-claim

  #==========rdp-mitm values===============
  rdpmitm:
    name: rdp-mitm
    replicaCount: 1

    image:
      repository: *privxRepo
      name: rdp-mitm
      pullPolicy: IfNotPresent
      tag: *privxTag


    imagePullSecrets:
      - name: docker-pull-secret
    nameOverride: ""
    fullnameOverride: ""

    # If the image is missing from initContainer, then it will result in to
    # privxRepo/initContainerName:privxVersion
    initContainers:
      - name: rdp-mitm-conf
        imagePullPolicy: IfNotPresent
        command: [ "/bin/sh", "-c" ]
        env:
        - name: KEY_PASS
          value: inquisition
        args:
          - echo copying rdpmitm static resources;
            cp -rf rdpmitm/* /opt/privx/etc/rdpmitm/;
            echo generating redemption certs;
            ./rdpmitm/scripts/redemption_cert.sh;
        volumeMounts:
        - mountPath: /opt/privx/etc
          name: privx-config
          subPath: privxetc
        - mountPath: /etc/nginx/tls
          name: privx-tls-vol
        resources: {}
          # limits:
          #   cpu: 100m
          #   memory: 128Mi
          # requests:
          #   cpu: 100m
          #   memory: 128Mi

    serviceAccount:
      # Specifies whether a service account should be created
      create: true
      # Annotations to add to the service account
      annotations: {}
      # The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template
      name: rdp-mitm

    podAnnotations: {}
    useGlobalPodSecurityContext: true
    securityContext: {}

    service:
      enabled: true
      type: ClusterIP
      port: 8093
      internal:
        - name: rdp
          port: 3389
          protocol: TCP

    ingress:
      https:
        name: https
        useCommonHost: true
        useCommonAnnotations: true
        className: ""
        annotations:
          nginx.ingress.kubernetes.io/proxy-ssl-name: "rdp-mitm"
        hosts:
          - host: localhost
            paths:
              - path: /rdp-mitm
                pathType: Prefix
        tls:
          - secretName: privx-tls
            hosts:
              - localhost

    resources: {}
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi

    rbac:
      create: false

    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 100
      targetCPUUtilizationPercentage: 80
      # targetMemoryUtilizationPercentage: 80

    nodeSelector: {}

    tolerations: []

    affinity: {}
    level:
      log: DEBUG
      trace: 3

    volumes:
      enabled: true
      volumeMounts:
        - mountPath: /tmp
          name: privx-config
          subPath: privxrdpmitmtmp
        - mountPath: /var/run
          name: privx-config
          subPath: privxredemption
        - mountPath: /opt/privx/cert
          name: privx-config
          subPath: privxcert
        - mountPath: /opt/privx/keyvault
          name: privx-config
          subPath: keyvault
        - mountPath: /opt/privx/etc
          name: privx-config
          subPath: privxetc
        - mountPath: /etc/nginx/ssl
          name: privx-config
          subPath: nginxssl
        - mountPath: /var/privx/audit
          name: privx-config
          subPath: privxaudit
        - mountPath: /etc/nginx/tls
          name: privx-tls-vol
      claims:
        - name: privx-config
          claimName: privx-claim
      secrets:
        - name: privx-tls-vol
          secretName: privx-tls

  #==========ssh-mitm values===============
  sshmitm:
    name: ssh-mitm
    replicaCount: 1

    image:
      repository: *privxRepo
      name: ssh-mitm
      pullPolicy: IfNotPresent
      tag: *privxTag


    imagePullSecrets:
      - name: docker-pull-secret
    nameOverride: ""
    fullnameOverride: ""

    initContainers: []
    serviceAccount:
      # Specifies whether a service account should be created
      create: true
      # Annotations to add to the service account
      annotations: {}
      # The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template
      name: ssh-mitm

    podAnnotations: {}
    useGlobalPodSecurityContext: true
    securityContext: {}

    service:
      enabled: true
      type: ClusterIP
      port: 8095
      internal:
        - name: ssh-proxy
          port: 2222
          protocol: TCP
        - name: socks-proxy
          port: 1080
          protocol: TCP
    ingress:
      https:
        name: https
        useCommonHost: true
        useCommonAnnotations: true
        className: ""
        annotations:
          nginx.ingress.kubernetes.io/proxy-ssl-name: "ssh-mitm"
        hosts:
          - host: localhost
            paths:
              - path: /ssh-mitm
                pathType: Prefix
        tls:
          - secretName: privx-tls
            hosts:
              - localhost

    resources: {}
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi

    rbac:
      create: false

    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 100
      targetCPUUtilizationPercentage: 80
      # targetMemoryUtilizationPercentage: 80

    nodeSelector: {}

    tolerations: []

    affinity: {}
    level:
      log: DEBUG
      trace: 3

    volumes:
      enabled: true
      volumeMounts:
        - mountPath: /tmp
          name: privx-config
          subPath: privxsshmitmshareddrive
        - mountPath: /opt/privx/cert
          name: privx-config
          subPath: privxcert
        - mountPath: /opt/privx/keyvault
          name: privx-config
          subPath: keyvault
        - mountPath: /opt/privx/etc
          name: privx-config
          subPath: privxetc
        - mountPath: /etc/nginx/ssl
          name: privx-config
          subPath: nginxssl
        - mountPath: /var/privx/audit
          name: privx-config
          subPath: privxaudit
      claims:
        - name: privx-config
          claimName: privx-claim

  #==========trail-index values===============
  trailindex:
    name: trail-index
    replicaCount: 1

    image:
      repository: *privxRepo
      name: trail-index
      pullPolicy: IfNotPresent
      tag: *privxTag


    imagePullSecrets:
      - name: docker-pull-secret
    nameOverride: ""
    fullnameOverride: ""

    initContainers: []
    serviceAccount:
      # Specifies whether a service account should be created
      create: true
      # Annotations to add to the service account
      annotations: {}
      # The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template
      name: trail-index

    podAnnotations: {}
    useGlobalPodSecurityContext: true
    securityContext: {}

    service:
      enabled: true
      type: ClusterIP
      port: 8094

    ingress:
      https:
        name: https
        useCommonHost: true
        useCommonAnnotations: true
        className: ""
        annotations:
          nginx.ingress.kubernetes.io/proxy-ssl-name: "trail-index"
        hosts:
          - host: localhost
            paths:
              - path: /trail-index
                pathType: Prefix
        tls:
          - secretName: privx-tls
            hosts:
              - localhost

    resources: {}
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi

    rbac:
      create: false

    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 100
      targetCPUUtilizationPercentage: 80
      # targetMemoryUtilizationPercentage: 80

    nodeSelector: {}

    tolerations: []

    affinity: {}
    level:
      log: DEBUG
      trace: 3

    volumes:
      enabled: true
      volumeMounts:
        - mountPath: /opt/privx/cert
          name: privx-config
          subPath: privxcert
        - mountPath: /opt/privx/keyvault
          name: privx-config
          subPath: keyvault
        - mountPath: /opt/privx/etc
          name: privx-config
          subPath: privxetc
        - mountPath: /etc/nginx/ssl
          name: privx-config
          subPath: nginxssl
        - mountPath: /var/privx/audit
          name: privx-config
          subPath: privxaudit
      claims:
        - name: privx-config
          claimName: privx-claim

  #==========role-store values===============
  rolestore:
    name: role-store
    replicaCount: 1

    image:
      repository: *privxRepo
      name: role-store
      pullPolicy: IfNotPresent
      tag: *privxTag


    imagePullSecrets:
      - name: docker-pull-secret
    nameOverride: ""
    fullnameOverride: ""

    initContainers: []
    serviceAccount:
      # Specifies whether a service account should be created
      create: true
      # Annotations to add to the service account
      annotations: {}
      # The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template
      name: role-store

    podAnnotations: {}
    useGlobalPodSecurityContext: true
    securityContext: {}

    service:
      enabled: true
      type: ClusterIP
      port: 8081

    ingress:
      https:
        name: https
        useCommonHost: true
        useCommonAnnotations: true
        className: ""
        annotations:
          nginx.ingress.kubernetes.io/proxy-ssl-name: "role-store"
        hosts:
          - host: localhost
            paths:
              - path: /role-store
                pathType: Prefix
              - path: /scim
                pathType: Prefix
        tls:
          - secretName: privx-tls
            hosts:
              - localhost

    resources: {}
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi

    rbac:
      create: false

    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 100
      targetCPUUtilizationPercentage: 80
      # targetMemoryUtilizationPercentage: 80

    nodeSelector: {}

    tolerations: []

    affinity: {}
    level:
      log: DEBUG
      trace: 3

    volumes:
      enabled: true
      volumeMounts:
        - mountPath: /opt/privx/cert
          name: privx-config
          subPath: privxcert
        - mountPath: /opt/privx/keyvault
          name: privx-config
          subPath: keyvault
        - mountPath: /opt/privx/etc
          name: privx-config
          subPath: privxetc
        - mountPath: /etc/nginx/ssl
          name: privx-config
          subPath: nginxssl
      claims:
        - name: privx-config
          claimName: privx-claim

  #==========settings values===============
  settings:
    name: settings
    replicaCount: 1

    image:
      repository: *privxRepo
      name: settings
      pullPolicy: IfNotPresent
      tag: *privxTag


    imagePullSecrets:
      - name: docker-pull-secret
    nameOverride: ""
    fullnameOverride: ""

    initContainers: []
    serviceAccount:
      # Specifies whether a service account should be created
      create: true
      # Annotations to add to the service account
      annotations: {}
      # The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template
      name: settings

    podAnnotations: {}
    useGlobalPodSecurityContext: true
    securityContext: {}

    service:
      enabled: true
      type: ClusterIP
      port: 8099

    ingress:
      https:
        name: https
        useCommonHost: true
        useCommonAnnotations: true
        className: ""
        annotations:
          nginx.ingress.kubernetes.io/proxy-ssl-name: "settings"
        hosts:
          - host: localhost
            paths:
              - path: /settings
                pathType: Prefix
        tls:
          - secretName: privx-tls
            hosts:
              - localhost

    resources: {}
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi

    rbac:
      create: false

    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 100
      targetCPUUtilizationPercentage: 80
      # targetMemoryUtilizationPercentage: 80

    nodeSelector: {}

    tolerations: []

    affinity: {}
    level:
      log: DEBUG
      trace: 3

    volumes:
      enabled: true
      volumeMounts:
        - mountPath: /opt/privx/cert
          name: privx-config
          subPath: privxcert
        - mountPath: /opt/privx/keyvault
          name: privx-config
          subPath: keyvault
        - mountPath: /opt/privx/etc
          name: privx-config
          subPath: privxetc
        - mountPath: /etc/nginx/ssl
          name: privx-config
          subPath: nginxssl
      claims:
        - name: privx-config
          claimName: privx-claim

  #==========user-store values===============
  userstore:
    name: user-store
    replicaCount: 1

    image:
      repository: *privxRepo
      name: user-store
      pullPolicy: IfNotPresent
      tag: *privxTag


    imagePullSecrets:
      - name: docker-pull-secret
    nameOverride: ""
    fullnameOverride: ""

    initContainers: []
    serviceAccount:
      # Specifies whether a service account should be created
      create: true
      # Annotations to add to the service account
      annotations: {}
      # The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template
      name: user-store

    podAnnotations: {}
    useGlobalPodSecurityContext: true
    securityContext: {}

    service:
      enabled: true
      type: ClusterIP
      port: 8084

    ingress:
      https:
        name: https
        useCommonHost: true
        useCommonAnnotations: true
        className: ""
        annotations:
          nginx.ingress.kubernetes.io/proxy-ssl-name: "user-store"
        hosts:
          - host: localhost
            paths:
              - path: /local-user-store
                pathType: Prefix
        tls:
          - secretName: privx-tls
            hosts:
              - localhost

    resources: {}
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi

    rbac:
      create: false

    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 100
      targetCPUUtilizationPercentage: 80
      # targetMemoryUtilizationPercentage: 80

    nodeSelector: {}

    tolerations: []

    affinity: {}
    level:
      log: DEBUG
      trace: 3

    volumes:
      enabled: true
      volumeMounts:
        - mountPath: /opt/privx/cert
          name: privx-config
          subPath: privxcert
        - mountPath: /opt/privx/keyvault
          name: privx-config
          subPath: keyvault
        - mountPath: /opt/privx/etc
          name: privx-config
          subPath: privxetc
        - mountPath: /etc/nginx/ssl
          name: privx-config
          subPath: nginxssl
      claims:
        - name: privx-config
          claimName: privx-claim

  #==========vault values===============
  vault:
    name: vault
    replicaCount: 1

    image:
      repository: *privxRepo
      name: vault
      pullPolicy: IfNotPresent
      tag: *privxTag

    imagePullSecrets:
      - name: docker-pull-secret
    nameOverride: ""
    fullnameOverride: ""

    initContainers: []
    serviceAccount:
      # Specifies whether a service account should be created
      create: true
      # Annotations to add to the service account
      annotations: {}
      # The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template
      name: vault

    useGlobalPodSecurityContext: true
    securityContext: {}

    podAnnotations: {}

    service:
      enabled: true
      type: ClusterIP
      port: 8098

    ingress:
      https:
        name: https
        useCommonHost: true
        useCommonAnnotations: true
        className: ""
        annotations:
          nginx.ingress.kubernetes.io/proxy-ssl-name: "vault"
        hosts:
          - host: localhost
            paths:
              - path: /vault
                pathType: Prefix
        tls:
          - secretName: privx-tls
            hosts:
              - localhost

    resources: {}
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi

    rbac:
      create: false

    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 100
      targetCPUUtilizationPercentage: 80
      # targetMemoryUtilizationPercentage: 80

    nodeSelector: {}

    tolerations: []

    affinity: {}
    level:
      log: DEBUG
      trace: 3

    volumes:
      enabled: true
      volumeMounts:
        - mountPath: /opt/privx/cert
          name: privx-config
          subPath: privxcert
        - mountPath: /opt/privx/keyvault
          name: privx-config
          subPath: keyvault
        - mountPath: /opt/privx/etc
          name: privx-config
          subPath: privxetc
        - mountPath: /etc/nginx/ssl
          name: privx-config
          subPath: nginxssl
      claims:
        - name: privx-config
          claimName: privx-claim

  #==========workflow-engine values===============
  workflowengine:
    name: workflow-engine
    replicaCount: 1

    image:
      repository: *privxRepo
      name: workflow-engine
      pullPolicy: IfNotPresent
      tag: *privxTag


    imagePullSecrets:
      - name: docker-pull-secret
    nameOverride: ""
    fullnameOverride: ""

    # If the image is missing from initContainer, then it will result in to
    # privxRepo/initContainerName:privxVersion
    initContainers:
      - name: workflow-engine-conf
        imagePullPolicy: IfNotPresent
        command: [ "/bin/sh", "-c" ]
        args:
          - echo copying templates;
            cp -rf templates/* /opt/privx/etc/templates/;
            echo copying locales;
            cp -rf locales/* /opt/privx/etc/locales/workflowengine;
        volumeMounts:
        - mountPath: /opt/privx/etc
          name: privx-config
          subPath: privxetc
        resources: {}
          # limits:
          #   cpu: 100m
          #   memory: 128Mi
          # requests:
          #   cpu: 100m
          #   memory: 128Mi
    serviceAccount:
      # Specifies whether a service account should be created
      create: true
      # Annotations to add to the service account
      annotations: {}
      # The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template
      name: workflow-engine

    useGlobalPodSecurityContext: true
    securityContext:
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false

    podAnnotations: {}

    service:
      enabled: true
      type: ClusterIP
      port: 8085

    ingress:
      https:
        name: https
        useCommonHost: true
        useCommonAnnotations: true
        className: ""
        annotations:
          nginx.ingress.kubernetes.io/proxy-ssl-name: "workflow-engine"
        hosts:
          - host: localhost
            paths:
              - path: /workflow-engine
                pathType: Prefix
        tls:
          - secretName: privx-tls
            hosts:
              - localhost

    resources: {}
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi

    rbac:
      create: false

    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 100
      targetCPUUtilizationPercentage: 80
      # targetMemoryUtilizationPercentage: 80

    nodeSelector: {}

    tolerations: []

    affinity: {}
    level:
      log: DEBUG
      trace: 3

    volumes:
      enabled: true
      volumeMounts:
        - mountPath: /opt/privx/cert
          name: privx-config
          subPath: privxcert
        - mountPath: /opt/privx/keyvault
          name: privx-config
          subPath: keyvault
        - mountPath: /opt/privx/etc
          name: privx-config
          subPath: privxetc
        - mountPath: /etc/nginx/ssl
          name: privx-config
          subPath: nginxssl
      claims:
        - name: privx-config
          claimName: privx-claim

  #==========nginx values===============
  nginx:
    name: nginx
    replicaCount: 1

    image:
      repository: *privxRepo
      name: nginx
      pullPolicy: IfNotPresent
      tag: *privxTag


    imagePullSecrets:
      - name: docker-pull-secret
    nameOverride: ""
    fullnameOverride: ""

    initContainers: []
    serviceAccount:
      # Specifies whether a service account should be created
      create: true
      # Annotations to add to the service account
      annotations: {}
      # The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template
      name: nginx

    podAnnotations: {}
    useGlobalPodSecurityContext: true
    securityContext: {}

    service:
      enabled: true
      type: ClusterIP
      port: 8444
      internal:
        - name: non-tls
          port: 80
          protocol: TCP
        - name: client-cert
          port: 8443
          protocol: TCP

    ingress:
      https:
        name: https
        useCommonAnnotations: false
        useCommonHost: true
        className: ""
        annotations:
          nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
          nginx.ingress.kubernetes.io/proxy-ssl-secret: "privx/proxy-ca-secret"
          nginx.ingress.kubernetes.io/proxy-ssl-verify: "on"
          nginx.ingress.kubernetes.io/proxy-ssl-name: "nginx"
          nginx.ingress.kubernetes.io/proxy-ssl-server-name: "on"
          nginx.ingress.kubernetes.io/ssl-ciphers: "AESGCM+EECDH:AESGCM+EDH:AES+EECDH:AES+EDH:AES128-GCM-SHA256:AES128-SHA256:AES128-SHA:-DSS:-EDH"
          nginx.ingress.kubernetes.io/ssl-prefer-server-ciphers: "true"
          nginx.ingress.kubernetes.io/proxy-ssl-protocols: "TLSv1.2"
          nginx.ingress.kubernetes.io/proxy-buffering: "on"
          nginx.ingress.kubernetes.io/proxy-buffer-size: "16k"
          nginx.ingress.kubernetes.io/proxy-busy-buffer-size: "16k"
        hosts:
          - host: localhost
            paths:
              - path: /
                pathType: Prefix
              - path: /auth/login
                pathType: Prefix
              - path: /auth/static
                pathType: Prefix
              - path: /auth/password
                pathType: Prefix
              - path: /auth/change-password
                pathType: Prefix
              - path: /auth/mfa
                pathType: Prefix
              - path: /oidc
                pathType: Prefix
        tls:
          - secretName: privx-tls
            hosts:
              - localhost

    resources: {}
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi

    rbac:
      create: false

    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 100
      targetCPUUtilizationPercentage: 80
      # targetMemoryUtilizationPercentage: 80

    nodeSelector: {}

    tolerations: []

    affinity: {}
    level:
      log: DEBUG
      trace: 3
    volumes:
      enabled: true
      volumeMounts:
        - mountPath: /tmp
          name: privx-config
          subPath: nginxtmp
        - mountPath: /var/log/nginx
          name: privx-config
          subPath: nginxlog
        - mountPath: /etc/nginx/privx/
          name: privx-config
          subPath: nginxprivx
        - mountPath: /etc/nginx/ssl
          name: privx-config
          subPath: nginxssl
        - mountPath: /etc/nginx/tls
          name: privx-tls-vol
        - mountPath: /etc/nginx/conf.d
          name: nginx-location-config
      claims:
        - name: privx-config
          claimName: privx-claim
      secrets:
        - name: privx-tls-vol
          secretName: privx-tls
      configMaps:
        - name: nginx-location-config
          configMap:
            name: nginx-config
            items:
              - key: privx.conf
                path: privx.conf

  #==========cert-updater values===============
  certupdater:
    name: cert-updater
    replicaCount: 1

    image:
      repository: *privxRepo
      name: installer
      pullPolicy: IfNotPresent
      tag: *privxTag


    imagePullSecrets:
      - name: docker-pull-secret
    nameOverride: ""
    fullnameOverride: ""

    initContainers: []
    serviceAccount:
      # Specifies whether a service account should be created
      create: true
      # Annotations to add to the service account
      annotations: {}
      # The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template
      name: cert-updater

    podAnnotations:
      reloader.stakater.com/auto: "true"

    useGlobalPodSecurityContext: true
    securityContext: {}

    service:
      enabled: false

    ingress: {}

    resources: {}

    rbac:
      create: false

    autoscaling:
      enabled: false

    nodeSelector: {}

    tolerations: []

    affinity: {}
    level:
      log:
      trace:

    environment:
      - name: INSTALLER_CMD
        value: update-trust
      - name: TRUST_CERT_PATH
        value: /etc/nginx/ca/ca.crt
    volumes:
      enabled: true
      volumeMounts:
        - mountPath: /opt/privx/keyvault
          name: privx-config
          subPath: keyvault
        - mountPath: /opt/privx/etc
          name: privx-config
          subPath: privxetc
        - mountPath: /etc/nginx/ca
          name: privx-ca-vol
      claims:
        - name: privx-config
          claimName: privx-claim
      secrets:
        - name: privx-ca-vol
          secretName: privx-ca-secret


  #==========network-access-manager values===============
  networkaccessmanager:
    name: network-access-manager
    replicaCount: 1

    image:
      repository: *privxRepo
      name: network-access-manager
      pullPolicy: IfNotPresent
      tag: *privxTag


    imagePullSecrets:
      - name: docker-pull-secret
    nameOverride: ""
    fullnameOverride: ""

    initContainers: []
    serviceAccount:
      # Specifies whether a service account should be created
      create: true
      # Annotations to add to the service account
      annotations: {}
      # The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template
      name: network-access-manager

    podAnnotations: {}
    useGlobalPodSecurityContext: true
    securityContext: {}

    service:
      enabled: true
      type: ClusterIP
      port: 8899

    ingress:
      https:
        name: https
        useCommonHost: true
        useCommonAnnotations: true
        className: ""
        annotations:
          nginx.ingress.kubernetes.io/proxy-ssl-name: "network-access-manager"
        hosts:
          - host: localhost
            paths:
              - path: /network-access-manager
                pathType: Prefix
        tls:
          - secretName: privx-tls
            hosts:
              - localhost

    resources: {}
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi

    rbac:
      create: false

    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 100
      targetCPUUtilizationPercentage: 80
      # targetMemoryUtilizationPercentage: 80

    nodeSelector: {}

    tolerations: []

    affinity: {}
    level:
      log: DEBUG
      trace: 3

    volumes:
      enabled: true
      volumeMounts:
        - mountPath: /opt/privx/cert
          name: privx-config
          subPath: privxcert
        - mountPath: /opt/privx/keyvault
          name: privx-config
          subPath: keyvault
        - mountPath: /opt/privx/etc
          name: privx-config
          subPath: privxetc
        - mountPath: /etc/nginx/ssl
          name: privx-config
          subPath: nginxssl
      claims:
        - name: privx-config
          claimName: privx-claim

  #==========secrets-manager values===============
  secretsmanager:
    name: secrets-manager
    replicaCount: 1

    image:
      repository: *privxRepo
      name: secrets-manager
      pullPolicy: IfNotPresent
      tag: *privxTag


    imagePullSecrets:
      - name: docker-pull-secret
    nameOverride: ""
    fullnameOverride: ""

    initContainers: []
    serviceAccount:
      # Specifies whether a service account should be created
      create: true
      # Annotations to add to the service account
      annotations: {}
      # The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template
      name: secrets-manager

    podAnnotations: {}
    useGlobalPodSecurityContext: true
    securityContext: {}

    service:
      enabled: true
      type: ClusterIP
      port: 8100

    ingress:
      https:
        name: https
        useCommonHost: true
        useCommonAnnotations: true
        className: ""
        annotations:
          nginx.ingress.kubernetes.io/proxy-ssl-name: "secrets-manager"
        hosts:
          - host: localhost
            paths:
              - path: /secrets-manager
                pathType: Prefix
        tls:
          - secretName: privx-tls
            hosts:
              - localhost

    resources: {}
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi

    rbac:
      create: false

    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 100
      targetCPUUtilizationPercentage: 80
      # targetMemoryUtilizationPercentage: 80

    nodeSelector: {}

    tolerations: []

    affinity: {}
    level:
      log: DEBUG
      trace: 3

    volumes:
      enabled: true
      volumeMounts:
        - mountPath: /opt/privx/cert
          name: privx-config
          subPath: privxcert
        - mountPath: /opt/privx/keyvault
          name: privx-config
          subPath: keyvault
        - mountPath: /opt/privx/etc
          name: privx-config
          subPath: privxetc
        - mountPath: /etc/nginx/ssl
          name: privx-config
          subPath: nginxssl
        - mountPath: /tmp
          name: privx-config
          subPath: secretsmanagertmp
      claims:
        - name: privx-config
          claimName: privx-claim

  #==========extender-service values===============
  extenderservice:
    name: extender-service
    replicaCount: 1

    image:
      repository: *privxRepo
      name: extender-service
      pullPolicy: IfNotPresent
      tag: *privxTag


    imagePullSecrets:
      - name: docker-pull-secret
    nameOverride: ""
    fullnameOverride: ""

    initContainers: []
    serviceAccount:
      # Specifies whether a service account should be created
      create: true
      # Annotations to add to the service account
      annotations: {}
      # The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template
      name: extender-service

    podAnnotations: {}
    useGlobalPodSecurityContext: true
    securityContext: {}

    service:
      enabled: true
      type: ClusterIP
      port: 8981

    ingress:
      https:
        name: https
        useCommonHost: true
        useCommonAnnotations: true
        className: ""
        annotations:
          nginx.ingress.kubernetes.io/proxy-ssl-name: "extender-service"
        hosts:
          - host: localhost
            paths:
              - path: /extender-service
                pathType: Prefix
        tls:
          - secretName: privx-tls
            hosts:
              - localhost

    resources: {}
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi

    rbac:
      create: false

    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 100
      targetCPUUtilizationPercentage: 80
      # targetMemoryUtilizationPercentage: 80

    nodeSelector: {}

    tolerations: []

    affinity: {}
    level:
      log: DEBUG
      trace: 3

    volumes:
      enabled: true
      volumeMounts:
        - mountPath: /opt/privx/cert
          name: privx-config
          subPath: privxcert
        - mountPath: /opt/privx/keyvault
          name: privx-config
          subPath: keyvault
        - mountPath: /opt/privx/etc
          name: privx-config
          subPath: privxetc
        - mountPath: /etc/nginx/ssl
          name: privx-config
          subPath: nginxssl
      claims:
        - name: privx-config
          claimName: privx-claim

  #==========syslog (optional for auditing)===============
  syslogservice:
    name: syslog-service
    replicaCount: 1
    hook: pre-install,pre-upgrade
    weight: "-1"
    hookDeletePolicy: before-hook-creation

    image:
      repository: *privxRepo
      name: syslog-service
      pullPolicy: IfNotPresent
      tag: *privxTag

    imagePullSecrets:
      - name: docker-pull-secret
    nameOverride: ""
    fullnameOverride: ""

    initContainers: []
    serviceAccount:
      # Specifies whether a service account should be created
      create: true
      # Annotations to add to the service account
      annotations: {}
      # The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template
      name: syslog-service

    podAnnotations: {}
    useGlobalPodSecurityContext: true
    securityContext: {}

    service:
      enabled: true
      type: ClusterIP
      port: 5514

    # syslog is not supposed to be accessed from outside the cluster, hence the
    # ingress is left empty.
    ingress: {}

    resources: {}
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi

    rbac:
      create: false

    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 100
      targetCPUUtilizationPercentage: 80
      # targetMemoryUtilizationPercentage: 80

    nodeSelector: {}

    tolerations: []

    affinity: {}
    level:
      log: DEBUG
      trace: 3

    volumes:
      enabled: true
      volumeMounts:
        - mountPath: /var/log/
          name: privx-config
          subPath: syslogaudit
        - mountPath: /etc/rsyslog.d/privx-syslog.conf
          subPath: privx-syslog.conf
          name: privx-syslog-config
      claims:
        - name: privx-config
          claimName: privx-claim
      configMaps:
        - name: privx-syslog-config
          configMap:
            name: syslog-config

  #==========db-proxy values===============
  dbproxy:
    name: db-proxy
    replicaCount: 1

    image:
      repository: *privxRepo
      name: db-proxy
      pullPolicy: IfNotPresent
      tag: *privxTag


    imagePullSecrets:
      - name: docker-pull-secret
    nameOverride: ""
    fullnameOverride: ""

    initContainers: []
    serviceAccount:
      # Specifies whether a service account should be created
      create: true
      # Annotations to add to the service account
      annotations: {}
      # The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template
      name: db-proxy

    podAnnotations: {}
    useGlobalPodSecurityContext: true
    securityContext: {}

    service:
      enabled: true
      type: ClusterIP
      port: 8983

    ingress:
      https:
        name: https
        useCommonHost: true
        useCommonAnnotations: true
        className: ""
        annotations:
          nginx.ingress.kubernetes.io/proxy-ssl-name: "db-proxy"
        hosts:
          - host: localhost
            paths:
              - path: /db-proxy
                pathType: Prefix
        tls:
          - secretName: privx-tls
            hosts:
              - localhost

    resources: {}
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi

    rbac:
      create: false

    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 100
      targetCPUUtilizationPercentage: 80
      # targetMemoryUtilizationPercentage: 80

    nodeSelector: {}

    tolerations: []

    affinity: {}
    level:
      log: DEBUG
      trace: 3

    volumes:
      enabled: true
      volumeMounts:
        - mountPath: /opt/privx/cert
          name: privx-config
          subPath: privxcert
        - mountPath: /opt/privx/keyvault
          name: privx-config
          subPath: keyvault
        - mountPath: /opt/privx/etc
          name: privx-config
          subPath: privxetc
        - mountPath: /etc/nginx/ssl
          name: privx-config
          subPath: nginxssl
        - mountPath: /var/privx/audit
          name: privx-config
          subPath: privxaudit
      claims:
        - name: privx-config
          claimName: privx-claim
