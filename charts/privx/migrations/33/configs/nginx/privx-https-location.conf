# PrivX nginx location directives for https server

#
# Important note about nginx location blocks and proxy_pass directives:
#
# nginx performs uri normalization before matching location blocks.
# During normalization the request uri is decoded and path is normalized
# by traversing '../' and './' components (always), and compressing
# duplicate '//' components (controlled by merge_slashes).
#
# The normalized uri is placed in the variable $uri. The raw unprocessed
# request uri in is $request_uri.
#
# When the proxy_pass directive is used, the request is forwarded
# to the backend server. The format of the final backend server request
# uri depends on the proxy_pass directive:
#
#   If the proxy_pass directive is specified with a URI, then when a
#   request is passed to the server, the part of a normalized request
#   URI matching the location is replaced by a URI specified in the
#   directive.
#
#   If proxy_pass is specified without a URI, the request URI is passed
#   to the server in the same form as sent by a client when the original
#   request is processed, or the full normalized request URI is passed
#   when processing the changed URI.
#
# Because of this the PrivX nginx configuration MUST use the following
# rules:
#
# 1) Each location block MUST check that the raw $request_uri matches the
#    expected location prefix and return 404 on mismatch. This protects
#    against path traversal attacks resulting into the request matching
#    a location block that they should not match.
#
# 2) proxy_pass directives MUST NOT specify a uri path component. Only
#    schema, hostname and port are allowed. This ensures that the backend
#    server request contains the raw $request_uri and not the normalized
#    $uri.
#
# Rule 2 also means that each microservice MUST use full paths in the REST
# endpoint routes.
#
# For more information see:
#   http://nginx.org/en/docs/http/ngx_http_core_module.html#var_uri
#   http://nginx.org/en/docs/http/ngx_http_core_module.html#var_request_uri
#   http://nginx.org/en/docs/http/ngx_http_core_module.html#location
#   http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass

proxy_ssl_trusted_certificate   /etc/nginx/ssl/privx-ca.crt;
proxy_ssl_verify                on;
proxy_ssl_certificate           /etc/nginx/ssl/nginx-internal.crt;
proxy_ssl_certificate_key       /etc/nginx/ssl/nginx-internal.key;

location = /auth/api/v1/client-cert {
        return 404;
}
location ^~ /privx/static/ {
        if ($request_uri !~* ^/privx/static/) {
                return 404;
        }
        include privx/privx-static-cache.conf;
        autoindex       off;
        index           app.html;
        root            /www/data/;
}
location = /license {
        if ($request_uri !~* ^/license$) {
                return 404;
        }
        proxy_pass      https://{{ .Values.ms.authorizer.name }}:{{ .Values.ms.authorizer.service.port }}/authorizer/api/v1/license;
        include         privx/privx-proxy-headers.conf;
}
location = /license.js {
        if ($request_uri !~* ^/license.js$) {
                return 404;
        }
        proxy_pass      https://{{ .Values.ms.licensemanager.name }}:{{ .Values.ms.licensemanager.service.port }}/license-manager/api/v1/license.js;
        include         privx/privx-proxy-headers.conf;
}
location = /version.js {
        if ($request_uri !~* ^/version.js$) {
                return 404;
        }
        proxy_pass      https://{{ .Values.ms.authorizer.name }}:{{ .Values.ms.authorizer.service.port }}/authorizer/api/v1/version.js;
        include         privx/privx-proxy-headers.conf;
}
location /oidc {
        if ($request_uri !~* ^/oidc/) {
                return 404;
        }
        rewrite ^/oidc/(.*)$ /$1 break;
        proxy_buffer_size       16k;
        proxy_busy_buffers_size 16k;
        proxy_pass      https://{{ .Values.ms.auth.name }}:{{ .Values.ms.auth.service.internal.oidc.port }};
        include         privx/privx-proxy-headers.conf;
}
location ^~ /auth/static/ {
        if ($request_uri !~* ^/auth/static/) {
                return 404;
        }
        include privx/privx-static-cache.conf;
        autoindex       off;
        index           app.html;
        root            /www/auth-ui-data/;
}
location /auth/mfa/totp {
        if ($request_uri !~* ^/auth/mfa/totp) {
                return 404;
        }
        autoindex       off;
        index           app.html;
        try_files       $uri /auth/app.html;
        alias           /www/auth-ui-data/;
        error_page      404 =404 /auth/app.html;
}
location /privx/ {
        if ($request_uri !~* ^/privx/) {
                return 404;
        }
        autoindex       off;
        index           app.html;
        try_files       $uri /privx/app.html;
        alias           /www/data/;
        error_page      404 =404 /privx/app.html;
}
location /auth/ {
        if ($uri ~* ^/auth/api/) {
                return 404;
        }
        if ($request_uri !~* ^/auth/) {
                return 404;
        }
        autoindex       off;
        index           app.html;
        try_files       $uri /auth/app.html;
        alias           /www/auth-ui-data/;
        error_page      404 =404 /auth/app.html;
}
location = /robots.txt {
        if ($request_uri !~* ^/robots.txt$) {
                return 404;
        }
        root            /www/data/;
}
location /privx/robots.txt {
        return 404;
}
location /status {
        return 301 https://$http_host/privx/status;
}
location / {
        return 301 https://$http_host/privx/;
}
